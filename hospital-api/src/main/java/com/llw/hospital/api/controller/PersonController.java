package com.llw.hospital.api.controller;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.util.*;

import com.llw.cache.broadcast.BroadcastUtil;
import com.llw.hospital.api.DeviceService;
import com.llw.hospital.api.MedicalService;
import com.llw.hospital.api.MsgService;
import com.llw.hospital.api.PersonDataService;
import com.llw.hospital.api.PersonFeaturesService;
import com.llw.hospital.api.PersonModelService;
import com.llw.hospital.api.PersonService;
import com.llw.hospital.api.RecogService;
import com.llw.hospital.api.SysDictService;
import com.llw.hospital.api.SysOrganizationService;
import com.llw.hospital.api.SysRecognizeService;
import com.llw.hospital.api.VideoRecogService;
import com.llw.hospital.api.shiro.JWTFilter;
import com.llw.hospital.api.vo.RecogResultResponse;
import com.llw.hospital.api.vo.ResponseParam;
import com.llw.hospital.api.vo.person.CreateModelAndRecognizeRequest;
import com.llw.hospital.api.vo.person.CreateModelAndRecognizeResponse;
import com.llw.hospital.api.vo.person.CreateModelRequest;
import com.llw.hospital.api.vo.person.HospitalRegistrationInfo;
import com.llw.hospital.api.vo.person.PersonDetailInfo;
import com.llw.hospital.api.vo.person.PersonInfo;
import com.llw.hospital.api.vo.person.PersonRequest;
import com.llw.hospital.api.vo.person.PlanInfo;
import com.llw.hospital.api.vo.service.AliveService;
import com.llw.hospital.common.base.constants.BaseConstants;
import com.llw.hospital.common.base.constants.DeviceTypeConstants;
import com.llw.hospital.common.exception.ServiceException;
import com.llw.hospital.ds.entity.LoginUser;
import com.llw.hospital.dto.MedicalDto;
import com.llw.hospital.dto.MsgDto;
import com.llw.hospital.dto.PersonDataDto;
import com.llw.hospital.dto.PersonDto;
import com.llw.hospital.dto.PersonFeaturesDto;
import com.llw.hospital.dto.PersonModelDto;
import com.llw.hospital.dto.RecogDto;
import com.llw.hospital.dto.RecogExtendDto;
import com.llw.hospital.dto.RecognizeResult;
import com.llw.hospital.dto.SysOrganizationDto;
import com.llw.hospital.dto.VideoRecogDto;
import com.llw.hospital.util.DateUtils;

import org.apache.commons.lang3.StringUtils;
import org.apache.shiro.codec.Base64;
import org.apache.shiro.util.CollectionUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.alibaba.dubbo.config.annotation.Reference;
import com.github.pagehelper.PageInfo;
import com.github.pagehelper.util.StringUtil;
import com.jcl.dto.IdcardUtils;
import com.jcl.orm.tkmapper.LLwExample;
import com.jcl.orm.tkmapper.custom.LeftJoin;
import com.llw.module.network.ftp.FtpUtil;

import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@RestController
@RequestMapping("/api/person") 
public class PersonController {

	private Logger logger = LoggerFactory.getLogger(PersonController.class);

	@Autowired
	MedicalService medicalService;

	@Autowired
	RecogService recogService;

	@Autowired
	PersonService personService;

	@Autowired
	SysRecognizeService recognizeService;

//	@Autowired
//	PlanService planService;
//
//	@Autowired
//	AppealService appealService;
//
//	@Autowired
//	OuregisterService ouregisterService;
//
//	@Autowired
//	SysUserService sysUserService;

	@Autowired
	VideoRecogService videoRecogService;

	@Autowired
	private SysDictService sysDictService;

	@Autowired
	private MsgService msgService;

//	@Autowired
//	SceneRecogService sceneRecogService;
	
	@Autowired
	PersonModelService personModelService;
	
//	@Reference
//	ZoneService zoneService;
	 
	@Autowired
    DeviceService deviceService;
    
//	@Autowired
//    N1Service n1Service;
	
	@Autowired
    PersonFeaturesService featuresService;
 
//	@Autowired
//    RealTimeBusiService realTimeBusiService;
    
	@Autowired
    SysOrganizationService organizationService;
    
//	@Reference
//	HospitalRelationService  hospitalRelationService;
	
//	@Autowired
//	DeparrelationService deparrelationService;
	
//	@Autowired
//	BusinessSystemService businessSystemService;
	

	@Autowired
	AliveService aliveService;
    
//	@Autowired
//    OrgSysService orgSysService;
    
	@Autowired
    PersonDataService personDataService;
    
	@PostMapping(value = "/createModelAndRecognize")
	@ApiOperation(value = "建模和认证", notes = "建模和认证", tags = "人员信息相关接口列表")
	@ApiImplicitParams({ @ApiImplicitParam(name = "auth", value = "access token，登录接口返回的", required = true, dataType = "String", paramType = "header") })
	@ApiResponses({@ApiResponse(code = 200, message = "success"),
			@ApiResponse(code = 400, message = "系统异常"),
			@ApiResponse(code = 1002, message = "活体检测失败")
	})
	public @ApiParam ResponseParam<CreateModelAndRecognizeResponse> createModelAndRecognize(@RequestBody @ApiParam CreateModelAndRecognizeRequest request) {

		String  retMsg = null;
		boolean retResult = false;
		
		try {
			
			if (StringUtil.isEmpty(request.getDevCode())) {
				return ResponseParam.error("1000","设备编码不能为空");
			}
			if (StringUtil.isEmpty(request.getDevType())) {
				return ResponseParam.error("1000","设备类型不能为空");
			}			
			if (StringUtil.isEmpty(request.getBioType())) {
				return ResponseParam.error("1000","生物类型不能为空");
			}
			
    		Long orgId = deviceService.getOrgId(request.getDevCode(),null);
    		if(orgId <= -1L){//20200114
    			return ResponseParam.error("1000","设备未注册");
    		}
    		request.setOrgId(orgId);
    		
			if(request.getSpecialPerson()==null){//特殊人员(0:否，1:是)
				request.setSpecialPerson(0);
			}
			//认证业务（10:抽查认证、11:普查认证、12:入科认证、13:出院认证、14:实人就诊、15:实人购药、16:门特线上、17:门特线下、18:大额检查、19:诊疗项目、20:稽核认证）")
			if(request.getRecogBusi()==null){
				request.setRecogBusi(0);
			}
			
			String recogPhoto = null;
			//ceshi
			//String modelStr = "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";
			//request.setModelPhoto(modelStr);
			if(!(request.getSpecialPerson()==1 && request.getDevType().equals(DeviceTypeConstants.P310.getCode()))){
				if (StringUtil.isEmpty(request.getModelPhoto())) {//这儿上传的就是认证照，request.getRecogPhoto()没有传递数据
					return ResponseParam.error("1000","认证照不能为空");
				}			
//		    	recogPhoto = "http://218.76.43.103:8008/medicarePhoto/data1/medical/recognize/20190824/729e5e49-98a2-4709-9d1c-cae75a13f537.jpg";
				recogPhoto = FtpUtil.getInstance(BaseConstants.MODULE_NAME).upload(new ByteArrayInputStream(Base64.decode(request.getModelPhoto())),"recognize","jpg");
				if (StringUtil.isEmpty(recogPhoto)) {
					return ResponseParam.error("FTP服务器异常");
				}else{
					request.setRecogPhoto(recogPhoto);
				}
			}

			
	
			List<String> pics = Arrays.asList(request.getModelPhoto());
			if(!aliveService.aliveDetect(pics)){
				return ResponseParam.error("1002","活体检测失败");
			}


			String idcardPhoto = null;
			//ceshi
			//request.setIdcardPhoto(modelStr);
			if (StringUtil.isNotEmpty(request.getIdcardPhoto())) {
//				idcardPhoto = "http://218.76.43.103:8008/medicarePhoto/data1/medical/recognize/20190824/729e5e49-98a2-4709-9d1c-cae75a13f537.jpg";
				idcardPhoto = FtpUtil.getInstance(BaseConstants.MODULE_NAME).upload(new ByteArrayInputStream(Base64.decode(request.getIdcardPhoto())), "idcard", "jpg");
				if (StringUtil.isEmpty(idcardPhoto)) {
					return ResponseParam.error("FTP服务器异常");
				}
				request.setIdcardPhoto(idcardPhoto);
			}
			
			//取人员基本信息--非特殊人员,没模板则建模
			PersonDto person = this.getPersonInfo(request,new HashMap<>());
			request.setPersonId(person.getPersonId());
			
			if (request.getSpecialPerson()==0) {
				//非特殊人员进行认证
				retResult =  this.personRecog(request);
				retMsg = retResult?"比对成功":"比对失败";
				//更改认证状态 t_medical
				if(retResult){
					upRecogStatusBypersonId(1, request);
				}else{
					upRecogStatusBypersonId(2, request);
				}
				
			}else{
				//特殊人员进行登记，由经办人员审核
				retResult =  this.specialRecog(request);
				retMsg = retResult?"登记成功，等待经办人审核":"登记失败";
				//更改认证状态 t_medical
				if(retResult){
					upRecogStatusBypersonId(1, request);
				}else{
					upRecogStatusBypersonId(2, request);
				}
			}
			
			CreateModelAndRecognizeResponse resultResponse = new CreateModelAndRecognizeResponse();
			resultResponse.setMessage(retMsg);
			resultResponse.setSuccess(retResult);
			
			return ResponseParam.ok().setData(resultResponse);	
			
		} catch (ServiceException e) {
			return ResponseParam.error(e.getErrorCode(),e.getMessage());
		} catch (Exception e) {
			return ResponseParam.error("服务异常");
		}
		
		
	}
	
	@PostMapping(value = "/createModel")
	@ApiOperation(value = "建模", notes = "建模", tags = "人员信息相关接口列表")
	@ApiImplicitParams({ @ApiImplicitParam(name = "auth", value = "access token，登录接口返回的", required = true, dataType = "String", paramType = "header") })
	@ApiResponses({@ApiResponse(code = 200, message = "success"),@ApiResponse(code = 400, message = "系统异常") })
	public @ApiParam ResponseParam createModel(@RequestBody @ApiParam CreateModelRequest request) {

		if(StringUtil.isEmpty(request.getIdcard())){
			return ResponseParam.error("1000","身份证号码不能为空");
		}
		if(StringUtil.isEmpty(request.getName())){
			return ResponseParam.error("1000","姓名不能为空");
		}
		if(StringUtil.isEmpty(request.getModelPhoto())){
			return ResponseParam.error("1000","模板照不能为空");
		}
		
		if (!IdcardUtils.validateIdCard18(request.getIdcard())) {
			return ResponseParam.error("1000","身份证号码不正确");
		}
		if (request.getName().length() > 50) {
			return ResponseParam.error("1000","姓名长度不正确");
		}	
		
		//String modelPhoto = "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";
		String modelPhoto = FtpUtil.getInstance(BaseConstants.MODULE_NAME).upload(new ByteArrayInputStream(Base64.decode(request.getModelPhoto())), "model", "jpg");
		
		PersonDto where = new PersonDto();
		where.setIdcard(request.getIdcard());
		where.setName(request.getName());
		PersonDto personInfo = personService.selectOne(where);
	 
		//先新增人员基本信息
		if(personInfo==null){
			String name = request.getName().trim();
			String idcard = request.getIdcard().trim();
			String birthday = idcard.substring(6, 10) + "-" + idcard.substring(10, 12) + "-" + idcard.substring(12, 14);
			String sex = Integer.parseInt(idcard.substring(16, 17)) % 2 == 0 ? "2": "1";
	
			PersonDto personDto = new PersonDto();
			personDto.setName(name);
			personDto.setIdcard(idcard);
			personDto.setSex(sex);
			personDto.setSicard(request.getSicard());
			personDto.setIdcardPhoto(modelPhoto);
			personDto.setHeadPhoto(modelPhoto);
			personDto.setBirthday(DateUtils.string2Date(birthday));
			Long personId = personService.insertPerson(personDto);
			if (personId < 1) {
				return ResponseParam.error("1000","新增人员失败");
			}
			personInfo = personService.selectByPrimaryKey(personId);
		}
		
		// 添加人员模板信息
		if (StringUtil.isNotEmpty(modelPhoto)){
			List<String> pics = Arrays.asList(request.getModelPhoto());
			if(!aliveService.aliveDetect(pics)){
				return ResponseParam.error("1002","活体检测失败");
			}

			PersonModelDto model = new PersonModelDto();
			model.setPersonId(personInfo.getPersonId());
			model.setBioType(Integer.parseInt(request.getBioType()));
			model.setModelAddress(modelPhoto);
			model.setIdcardAddress(modelPhoto);
			model.setCreateType(11);
			model.setCreateTime(new Date());
			model.setStatus(10);
			personService.addModel(model);
		}

		return ResponseParam.ok("建模成功");
		
	}
	
	
	
	/**
	 * 取人员基本信息
	 * @param request
	 * @return
	 */
	private PersonDto getPersonInfo(CreateModelAndRecognizeRequest request, Map<String,String> map){
		
		PersonDto personInfo = null;
		
		//1、查询此人是否已经有基本信息存在
		if(personInfo==null && request.getPersonId()!=null && request.getPersonId()>0){
			PersonDto where = new PersonDto();
			where.setPersonId(request.getPersonId());
			personInfo = personService.selectOne(where);
		}
		
		if(personInfo==null && StringUtil.isNotEmpty(request.getIdcard()) && StringUtil.isNotEmpty(request.getName())){
			PersonDto where = new PersonDto();
			where.setIdcard(request.getIdcard());
			where.setName(request.getName());
			personInfo = personService.selectOne(where);
		}
		 
		//2、若此人没有基本信息存在，则新增人员基本信息
		if(personInfo==null){
			if(StringUtil.isEmpty(request.getIdcard()) || StringUtil.isEmpty(request.getName())){
				throw new ServiceException("1000","身份证号码或者姓名不能为空");
			}
			if (!IdcardUtils.validateIdCard18(request.getIdcard())) {
				throw new ServiceException("1000","身份证号码不正确");
			}
			if (request.getName().length() > 50) {
				throw new ServiceException("1000","姓名长度不正确");
			}			
			String name = request.getName().trim();
			String idcard = request.getIdcard().trim();
			String birthday = idcard.substring(6, 10) + "-" + idcard.substring(10, 12) + "-" + idcard.substring(12, 14);
			String sex = Integer.parseInt(idcard.substring(16, 17)) % 2 == 0 ? "2": "1";
	
			PersonDto personDto = new PersonDto();
			personDto.setName(name);
			personDto.setIdcard(idcard);
			personDto.setSex(sex);
			personDto.setSicard(request.getSicard());
			personDto.setIdcardPhoto(request.getIdcardPhoto());
			personDto.setHeadPhoto(request.getIdcardPhoto());
			personDto.setBirthday(DateUtils.string2Date(birthday));
			Long personId = personService.insertPerson(personDto);
			if (personId < 1) {
				throw new ServiceException("1000","新增人员失败");
			}
			personInfo = personService.selectByPrimaryKey(personId);
		}
		
		/**
		 * 3、判断此人是否为非特殊人员？
		 * a、若不是特殊人员，则查询此人是否有模板照，若没有则新增模板照；
		 * b、若是特殊人员，无需创建模板照；
		 */
        
		if(request.getSpecialPerson()==0 && StringUtil.isNotEmpty(request.getModelPhoto())){
			PersonModelDto where =  new PersonModelDto();
			where.setPersonId(personInfo.getPersonId());
			PersonModelDto tmpModel = personModelService.selectOne(where);
			if(tmpModel==null){
				String modelPhoto = FtpUtil.getInstance(BaseConstants.MODULE_NAME).upload(new ByteArrayInputStream(Base64.decode(request.getModelPhoto())), "model", "jpg");
				if (StringUtil.isNotEmpty(request.getIdcardPhoto())){
					//有证件照，人证比后进行建模
					List<String> picUrls1 = new ArrayList<String>();
					picUrls1.add(modelPhoto);//认证照及设备拍摄的照片
					List<String> picUrls2 = new ArrayList<String>();
					picUrls2.add(request.getIdcardPhoto());
					
					RecognizeResult recogResult = recognizeService.recognizePic(picUrls1, picUrls2, 11);
					if(!recogResult.isSuccess()){
						System.out.println("比对失败,人员添加人脸模板照失败:" + personInfo.getPersonId());
						logger.error("1000","比对失败,人员添加人脸模板照失败:" + personInfo.getPersonId());
						throw new ServiceException("1000","比对失败,人员添加人脸模板照失败");
					}else{
						System.out.println("人员添加模板照成功:"+personInfo.getPersonId());
						logger.error("人员添加模板照成功:"+personInfo.getPersonId());
					}
				}else{
					throw new ServiceException("1000","身份证照不能为空");
				}
				
				// 添加人员模板信息
				if (StringUtil.isNotEmpty(modelPhoto)){
					PersonModelDto model = new PersonModelDto();
					model.setPersonId(personInfo.getPersonId());
					model.setBioType(Integer.parseInt(request.getBioType()));
					model.setModelAddress(modelPhoto);
					model.setIdcardAddress(request.getIdcardPhoto());
					model.setCreateType(11);
					model.setDeviceCode(request.getDevCode());
					model.setDeviceType(request.getDevType());
					model.setCreateTime(new Date());
					model.setStatus(10);
					personService.addModel(model);
				}
			}else{
				System.out.println("人员已经有模板照，无需再创建模板照："+personInfo.getPersonId());
				logger.error("人员已经有模板照，无需再创建模板照："+personInfo.getPersonId());
			}
		}
		
		return personInfo;
		
	}
	
	/**
	 * 人员认证
	 * @param request
	 * @return
	 */
	private boolean personRecog(CreateModelAndRecognizeRequest request){
		MedicalDto medicalDto = new MedicalDto();
		try {
			MedicalDto w = new MedicalDto();
			w.setPersonId(request.getPersonId());
			//认证业务（详见字典表，10:抽查认证、11:普查认证、12:首次查床、13:出院认证、14:实人就诊、15:实人购药、16:门特线上、17:门特线下、18:大额检查、19:诊疗项目、20:医保稽核）
			if(request.getRecogBusi()==10 || request.getRecogBusi()==11 || request.getRecogBusi()==12 || request.getRecogBusi()==20){
				w.setMedicalType(1);//就诊类型（1住院、2门诊、3门特、4购药）
				w.setStatus(1);		//当前状态（1在院、2出院）
			}else if(request.getRecogBusi()==14){
				w.setMedicalType(2);
			}else if(request.getRecogBusi()==15){
				w.setMedicalType(4);
			}
			LLwExample example = new LLwExample(w);
			if(request.getRecogBusi()==18 || request.getRecogBusi()==19){
				example.andNotEqualTo("medicalType", 4);
			}
			example.orderBy("medicalId").desc();
		    List<MedicalDto> List = medicalService.selectByExample(example);
		    if(List!=null && List.size()>0){
		    	medicalDto = List.get(0);
		    }
		    
			//认证
			List<String> picUrls = new ArrayList<String>();
			picUrls.add(request.getRecogPhoto());
			
			RecognizeResult recogResult = recognizeService.recognize1(request.getPersonId(), picUrls, 11, null);
			
			RecogDto recogDto = new RecogDto();
			recogDto.setPersonId(request.getPersonId());
			recogDto.setBioType(request.getBioType());
			recogDto.setRecogTime(new Date());
			recogDto.setRecogBusi(Long.valueOf(request.getRecogBusi().longValue()));
			//bean.setSceneId(sceneRecogDto.getSceneId());
			recogDto.setDeviceCode(request.getDevCode());
			recogDto.setDeviceType(request.getDevType());
			recogDto.setRecogAddress(StringUtils.join(picUrls.toArray(), ","));
			recogDto.setCreateStaff(JWTFilter.getCurrentUser().getName());
			recogDto.setOrgId(request.getOrgId());
			//bean.setSysCode(medicalDto.getSysCode());
			//bean.setZoneCode(medicalDto.getZoneCode());
			recogDto.setBusiType(medicalDto.getBusiType());		
			//bean.setRecogResult(recogResult.isSuccess()?11:12);
			recogDto.setRecogScore(recogResult.getScore());
			recogDto.setMedicalId(medicalDto.getMedicalId());
			
			if(recogResult.isSuccess()){
				recogDto.setRecogResult(11l);//10未认证、 11认证已通过、12认证未通过
			}else{
				recogDto.setRecogResult(12l);
			}
			//bean.setSceneId(sceneRecogDto.getSceneId());
			//recogService.recognize(bean);
			//认证方式（10、人脸核验；11、特殊建模，12、特殊登记）
			recogDto.setRecogMode(10L);
			recogService.insertSelective(recogDto);
			
			return recogResult.isSuccess();
		} catch (Exception e) {
			logger.error("personRecog:认证失败：",e);
		}
		return false;
	}
	
	/**
	 * 特殊人员认证
	 * @param request
	 * @return
	 */
	private boolean specialRecog(CreateModelAndRecognizeRequest request){
		
		if (StringUtil.isEmpty(request.getModelPhoto()) && StringUtil.isEmpty(request.getSpecialReason())) {
			throw new ServiceException("1000","特殊人员原由不能为空");
		}
		String specialReason = request.getSpecialReason();
		
		MedicalDto medicalDto = new MedicalDto();
		
		try {
			MedicalDto w = new MedicalDto();
			w.setPersonId(request.getPersonId());
			//认证业务（详见字典表，10:抽查认证、11:普查认证、12:首次查床、13:出院认证、14:实人就诊、15:实人购药、16:门特线上、17:门特线下、18:大额检查、19:诊疗项目、20:医保稽核）
			if(request.getRecogBusi()==10 || request.getRecogBusi()==11 || request.getRecogBusi()==12 || request.getRecogBusi()==20){
				w.setMedicalType(1);
			}else if(request.getRecogBusi()==14){
				w.setMedicalType(2);
			}else if(request.getRecogBusi()==15){
				w.setMedicalType(4);
			}
			LLwExample example = new LLwExample(w);
			if(request.getRecogBusi()==18 || request.getRecogBusi()==19){
				example.andNotEqualTo("medicalType", 4);
			}
			example.orderBy("medicalId").desc();
		    List<MedicalDto> List = medicalService.selectByExample(example);
		    if(List!=null && List.size()>0){
		    	medicalDto = List.get(0);
		    }
		    
		    VideoRecogDto bean = new VideoRecogDto();
			bean.setPersonId(request.getPersonId());
			bean.setRecogBusi(request.getRecogBusi());
			bean.setRecogTime(new Date());
			//bean.setAuditStatus(20);//审核结果（20未审核、21审核已通过、22审核未通过）
			bean.setAuditStatus(21);//这儿默认审核已通过
			bean.setDeviceCode(request.getDevCode());
			bean.setDeviceType(request.getDevType());
			
			bean.setVideoAddress(request.getRecogPhoto());//认证照存放路径
			bean.setReason(specialReason);
			//bean.setSceneId(sceneRecogDto.getSceneId());
			bean.setInputStaff(JWTFilter.getCurrentUser().getUserId());
			bean.setMedicalId(medicalDto.getMedicalId());
			bean.setOrgId(request.getOrgId());
			bean.setSysCode(medicalDto.getSysCode());
			bean.setBusiType(medicalDto.getBusiType());
			bean.setZoneCode(medicalDto.getZoneCode());
	 
			int result = videoRecogService.insertSelective(bean);
			//videoRecogService.recognize(bean);
			if(result > 0){
				return true;
			}else{
				return false;
			}
	 
			//return true;		 
			
		} catch (Exception e) {
			logger.error("specialRecog:认证失败：",e);
		}
		return false;
	}
	 
 
	@PostMapping(value = "/recognize")
	@ApiOperation(value = "认证", notes = "认证",tags = "人员信息相关接口列表")
	@ApiImplicitParams({@ApiImplicitParam(name = "auth",value = "access token，登录接口返回的",required = true,dataType = "String",paramType = "header")
	})
	@ApiResponses({
			@ApiResponse(code = 200,message = "success"),
			@ApiResponse(code = 400,message = "系统异常")
	})
    public ResponseParam<RecogResultResponse> recognize(@ApiParam(name="files",value = "人脸照片",required = false) @RequestParam(value = "files", required = false) MultipartFile[] files,
				@ApiParam(name="specialPerson",value = "特殊人员(0:否，1:是)",required = true) @RequestParam(value = "specialPerson", required = true) Integer specialPerson,
				@ApiParam(name="personId",value = "人员ID",required = true) @RequestParam(value = "personId", required = true) Long personId,
		        @ApiParam(name="planId",value = "认证计划ID",required = true) @RequestParam(value = "planId", required = true) Long planId,
		        @ApiParam(name="deviceCode",value = "设备编码") @RequestParam(value = "deviceCode") String deviceCode,
		        @ApiParam(name="deviceType",value = "设备类型(JXB309:体温枪、M320:POS终端M320、M321:POS终端M321、M323:POS终端M323、M324:POS终端M324、M330:POS终端M330、F120:双目人证通、F330:桌面式一体机、P310:POS终端P310、 P101：安卓手机、 P102：苹果手机") @RequestParam(value = "deviceType") String deviceType) {
		RecogResultResponse resultResponse = new RecogResultResponse();
		try {
			PersonFeaturesDto where = new PersonFeaturesDto();
			where.setPersonId(personId);
			where.setBioType(11);
			where.setStatus(10);
			PersonFeaturesDto f = featuresService.selectOne(where);
			if(f==null){
				return ResponseParam.error("没有模板，请先进行建模");
			}
//			SceneRecogDto sceneRecogDto = sceneRecogService.selectByPrimaryKey(planId);
//			if(sceneRecogDto==null){
//				return ResponseParam.error("认证批次号不存在");
//			}

//			if(specialPerson == 1 && sceneRecogDto.getVideoId()!=null){
//				return ResponseParam.error("此人已做过特殊人员认证");
//			}
//			
//			if(sceneRecogDto.getStatus()==13){
//				return ResponseParam.error("已过了认证时间，不无再认证");
//			}

			List<String> picUrls = new ArrayList<String>();
			if(files!=null && files.length>0){
				for (MultipartFile file:  files){
					if (file != null) {
						String oFile = FtpUtil.getInstance(BaseConstants.MODULE_NAME).upload(file,"recog");
						if(StringUtils.isNotEmpty(oFile)){
							picUrls.add(oFile);
						}
					}
				}
			}

			if(picUrls.size()==0){
				return ResponseParam.error("没有上传人脸照片");
			}
			
//			Long orgId = sceneRecogDto.getOrgId();
//			if(StringUtil.isNotEmpty(deviceCode)&&StringUtil.isNotEmpty(deviceType)){
//				orgId = deviceService.getOrgId(deviceCode,null);
//			}
			
			if(specialPerson == 0){
//				RecognizeResult recogResult = recognizeService.recognize1( personId, picUrls, 11, null);
//				RecogDto bean = new RecogDto();
//				bean.setSceneId(planId);
//				bean.setPersonId(personId);
//				bean.setMedicalId(sceneRecogDto.getMedicalId()); 
//				bean.setBioType("11");
//				bean.setRecogTime(new Date());
//				bean.setRecogAddress(StringUtils.join(picUrls.toArray(), ","));
//				bean.setCreateStaff(JWTFilter.getCurrentUser().getUserId());
//				bean.setOrgId(orgId);
//				bean.setSysCode(sceneRecogDto.getSysCode());
//				bean.setBusiType(sceneRecogDto.getBusiType());
//				bean.setRecogBusi(sceneRecogDto.getRecogBusi());
//			//	bean.setRecogBusi(10);
//				bean.setZoneCode(sceneRecogDto.getZoneCode());
//				bean.setRecogResult(recogResult.isSuccess()?11:12);
//				bean.setRecogScore(recogResult.getScore());
//				bean.setDeviceCode(deviceCode);
//				bean.setDeviceType(deviceType);
//				recogService.recognize(bean);
//				resultResponse.setMessage(recogResult.getMessage());
//				resultResponse.setSuccess(recogResult.isSuccess());
			}else{
				VideoRecogDto bean = new VideoRecogDto();
				bean.setSceneId(planId);
				bean.setPersonId(personId); 
				bean.setRecogTime(new Date());
				bean.setVideoAddress(StringUtils.join(picUrls.toArray(), ","));
				bean.setInputStaff(JWTFilter.getCurrentUser().getUserId());
//				bean.setOrgId(orgId);
//				bean.setSysCode(sceneRecogDto.getSysCode());
//				bean.setBusiType(sceneRecogDto.getBusiType());
//				bean.setZoneCode(sceneRecogDto.getZoneCode());
//				bean.setMedicalId(sceneRecogDto.getMedicalId());
//				bean.setRecogBusi(sceneRecogDto.getRecogBusi());
//				bean.setAuditStatus(20);
//				bean.setRecogBusi(sceneRecogDto.getRecogBusi());
				bean.setDeviceCode(deviceCode);
				bean.setDeviceType(deviceType);
				
				//bean.setRecogBusi(10);
				VideoRecogDto newbean  = videoRecogService.recognize(bean);

				resultResponse.setMessage("等待审核！");
				resultResponse.setSuccess(true);
				//MedicalDto medicalDto = medicalService.selectByPrimaryKey(sceneRecogDto.getMedicalId());
				//增加消息
	    		MsgDto msg = new MsgDto();
	    		msg.setStatus(0); 
	    		msg.setOperateType("3");
	    		msg.setCreateTime(new Date());
	    		msg.setBusiId(planId);
	    		msg.setOrgId(newbean.getOrgId());
	    		msg.setBusiType(newbean.getBusiType());
	    		msg.setSysCode(newbean.getSysCode());
	    		msg.setZoneCode(newbean.getZoneCode());
	    		//msg.setMsgTitle(medicalDto.getName()+"进行特殊人员申请，请处理");
	    		msgService.insert(msg);
	    		
			}

		} catch (ServiceException e1) {
			logger.error("认证失败：",e1);
			return ResponseParam.error(e1.getErrorCode(),e1.getMessage());
		} catch (Exception e2) {
			logger.error("认证失败：",e2);
			return ResponseParam.error("认证失败");
		}

		return ResponseParam.ok().setData(resultResponse);

	}

	@PostMapping("/queryPersonList")
	@ApiOperation(value = "病人住院信息", notes = "病人住院信息",tags = "人员信息相关接口列表")
	@ApiImplicitParams(@ApiImplicitParam(name = "auth",value = "access token，可以通过token接口获取，也可以用户名和密码加mac地址生成",required = true,dataType = "String",paramType = "header"))
	@ApiResponses({
	        @ApiResponse(code = 1001,message = "参数不正确"),
	        @ApiResponse(code = 1002,message = "无人员信息"),
	    })
	public  @ApiParam ResponseParam<List<PersonInfo>> queryPersonList(@RequestBody @ApiParam PersonRequest request){
		MedicalDto medicalDto = new MedicalDto();
		medicalDto.setMedicalType(1);//就诊类型（1住院、2门诊、3门特、4购药）  只查询住院的 
		medicalDto.setRevokeFlag(0);//查询未被撤销的人员
		medicalDto.setStatus(1);//默认查询在院的
		
		if(request.getPersonStatus() != null) {
			medicalDto.setStatus(request.getPersonStatus());
	    }

		if(request.getHospitalId() != null) {
			medicalDto.setHospitalId(request.getHospitalId());
		}

		if(request.getDepartId() != null) {
			//筛选部门就是筛选orgid
			medicalDto.setOrgId(request.getDepartId());
			//medicalDto.setDepartId(request.getDepartId());
		}

		
		try {
			LLwExample lLwExample = new LLwExample(medicalDto);

			if(request.getBeginTime() != null && request.getEndTime() != null && request.getBeginTime().getTime() != 0 &&  request.getEndTime().getTime() != 0){
                lLwExample.andBetween("inDate", request.getBeginTime(), request.getEndTime());
            }


            LLwExample lLwExample2= lLwExample.and();
            if(!StringUtil.isEmpty(request.getKeyWord())) {
            	lLwExample2.orLike("name", "%"+request.getKeyWord()+"%").orLike("bedNo","%"+ request.getKeyWord()+"%").orLike("medicalNo", "%"+request.getKeyWord()+"%");
            }
            PersonDto personDto = new PersonDto();
           
            LLwExample joinExample = new LLwExample(personDto);
            if(request.getFaceExist() != null) {
    			if(request.getFaceExist() == 1) {
    				joinExample.andEqualTo("faceExist", 1);
    				
    			}else{
    				joinExample.andCondition(" face_exist != 1 or face_exist is null ");
    			}
    		}
            lLwExample.orderBy(" inDate").desc().orderBy(" medicalId ").desc();
        	LeftJoin leftJoin = new LeftJoin(new String[]{"headPhoto as photoAddress","faceExist as faceExist"}, "personId", "personId", joinExample);
        	//PageInfo<MedicalDto> pageInfo = medicalService.selectByExampleLeftJoin(request.getPageNo(), request.getPageSize(), lLwExample, leftJoin, MedicalDto.class);
        	PageInfo<MedicalDto> pageInfo = medicalService.selectByExampleLeftJoinInOrg(request.getPageNo(), request.getPageSize(), lLwExample, leftJoin, MedicalDto.class);       	//PageInfo<MedicalDto> pageInfo =medicalService.selectByPage(request.getPageNo(), request.getPageSize(), lLwExample);
        	List<PersonInfo> result = new ArrayList<PersonInfo>();
    		if(!CollectionUtils.isEmpty(pageInfo.getList())) {
    			for(MedicalDto t:pageInfo.getList()) {
    				PersonInfo personInfo = new PersonInfo();
    				BeanUtils.copyProperties(t, personInfo);
    				
    				//查询是否有模板
    				/*PersonModelDto pm = new PersonModelDto();
    				pm.setPersonId(personInfo.getPersonId());
    				pm.setStatus(10);
    				List<PersonModelDto> personModelList = personModelService.selectList(pm);
    				if(CollectionUtils.isEmpty(personModelList)) {
    					personInfo.setHasModel(false);
    				}else {
    					personInfo.setHasModel(true);
    				}*/
    				if(t.getFaceExist() != null && t.getFaceExist() == 1) {
    					personInfo.setHasModel(true);
    				}else {
    					personInfo.setHasModel(false);
    				}
    				result.add(personInfo);
    			}
    		}
    		if(result == null || result.size() < 1) {
    			return ResponseParam.error("1002","无人员信息");
    		}else {
    			
    			return ResponseParam.ok().setData(result,pageInfo.getTotal());
    		}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return ResponseParam.error("500", "服务器出错");
		}

	}

	@GetMapping("/getRecogRecord")
	@ApiOperation(value = "查询认证记录", notes = "查询认证记录",tags = "人员信息相关接口列表")
	@ApiImplicitParams({@ApiImplicitParam(name = "auth",value = "access token，可以通过token接口获取，也可以用户名和密码加mac地址生成",required = true,dataType = "String",paramType = "header")
						})
	@ApiResponses({
	        @ApiResponse(code = 1001,message = "参数不正确"),
	        @ApiResponse(code = 1002,message = "无人员信息"),
	    })
	public  ResponseParam<PersonDetailInfo> getRecogRecord(
			@ApiParam(name="medicalId",value = "住院ID",required = true) @RequestParam(value = "medicalId",required = true) Long medicalId)
	{
		try {
		MedicalDto medicalDto = new MedicalDto();
		medicalDto.setMedicalId(medicalId);
		LLwExample lLwExample = new LLwExample(medicalDto);

		PersonDto personDto = new PersonDto();
        LLwExample joinExample = new LLwExample(personDto);
    	LeftJoin leftJoin = new LeftJoin(new String[]{"headPhoto as photoAddress"}, "personId", "personId", joinExample);
    	List<MedicalDto> medicalList = medicalService.selectByExampleLeftJoin(lLwExample, leftJoin, MedicalDto.class);
		//MedicalDto medical = medicalService.selectByPrimaryKey(medicalDto);

    	MedicalDto medical = medicalList.get(0);
		List<PersonDetailInfo> personDetailInfoList = new ArrayList<PersonDetailInfo>();
		if(medical != null) {

			int hasRecogCount = 0;//已认证
			RecogExtendDto recogExtendDto = new RecogExtendDto();
			recogExtendDto.setMedicalId(medicalId);
			PageInfo pageInfo = recogService.getRecogDtoList(recogExtendDto, 1, 10);
			List<RecogExtendDto> list = pageInfo.getList();
			if(!CollectionUtils.isEmpty(list)) {
				for (RecogExtendDto recogDto : list) {
					String recogStr = recogDto.getRecogStr();
        			if(!StringUtils.isEmpty(recogStr)){//未认证
        				String[] recogArray = recogStr.split(",");
        				if(recogArray.length >= 1){//说明有多条认证记录或者一条认证记录
        					hasRecogCount = recogArray.length;
        				}
        			}
				}
			}

			List<PlanInfo> checkRecordList = new ArrayList<PlanInfo>();
			PersonDetailInfo personDetailInfo = new PersonDetailInfo();
			BeanUtils.copyProperties(medical, personDetailInfo);
			personDetailInfo.setCheckRecordList(checkRecordList);

			Date inDate = medical.getInDate();
			int inHospitalDays = DateUtils.daysBetween(new Date(),inDate);
			personDetailInfo.setInHospitalDays(inHospitalDays);
			personDetailInfo.setNeedRecogCount(1);
			personDetailInfo.setHasRecogCount(hasRecogCount);
			
			return ResponseParam.ok().setData(personDetailInfo);
		}else {
			return ResponseParam.error("1002", "无人员信息");
		}
		}catch(Exception e){
			e.printStackTrace();
			return ResponseParam.error("500", "服务器出错");
		}
	}


	
	@GetMapping("/getPersonInfo")
	@ApiOperation(value="查询人员详细信息", notes = "查询人员详细信息", tags = "人员信息相关接口列表")
	@ApiImplicitParams({@ApiImplicitParam(name = "auth",value = "access token，可以通过token接口获取，也可以用户名和密码加mac地址生成",required = true,dataType = "String",paramType = "header")
						})
	@ApiResponses({
	        @ApiResponse(code = 1001,message = "参数不正确"),
	        @ApiResponse(code = 1002,message = "无人员信息"),
	        @ApiResponse(code = 1003,message = "此人员无模板照片"),
	        @ApiResponse(code = 1004,message = "新增人员失败")
	    })
	public  ResponseParam<PersonInfo> getPersonInfo(
			@ApiParam(name="idcard",value = "身份证号",required = true) @RequestParam(value = "idcard",required = false,defaultValue = "") String idcard,
			@ApiParam(name="sicard",value = "社保卡号",required = false) @RequestParam(value = "sicard",required = false,defaultValue = "") String sicard,
			@ApiParam(name="name",value = "姓名",required = true) @RequestParam(value = "name",required = false,defaultValue = "") String name)
	{
		PersonInfo pi = new PersonInfo();
		
		//身份证号 姓名必传
		if(StringUtil.isEmpty(idcard) || StringUtil.isEmpty(name)) {
			return ResponseParam.error("1001", "参数不正确");
		}
		
		PersonDto personInfo = null;
		if(StringUtil.isNotEmpty(idcard) && StringUtil.isNotEmpty(name)){
			PersonDto where = new PersonDto();
			where.setIdcard(idcard);
			where.setName(name);
			personInfo = personService.selectOne(where);
		}
		
		if(personInfo==null){
			if (!IdcardUtils.validateIdCard18(idcard)) {
				return ResponseParam.error("1001", "身份证号码不正确");
			}
			if (name.length() > 50) {
				return ResponseParam.error("1001", "姓名长度不正确");
			}			
			String birthday = idcard.substring(6, 10) + "-" + idcard.substring(10, 12) + "-" + idcard.substring(12, 14);
			String sex = Integer.parseInt(idcard.substring(16, 17)) % 2 == 0 ? "2": "1";
	
			PersonDto personDto = new PersonDto();
			personDto.setName(name);
			personDto.setIdcard(idcard);
			personDto.setSicard(sicard);
			personDto.setSex(sex);
			personDto.setBirthday(DateUtils.string2Date(birthday));
			Long personId = personService.insertPerson(personDto);
			if (personId < 1) {
				return ResponseParam.error("1004","新增人员失败");
			}
			personInfo = personService.selectByPrimaryKey(personId);
		}
		
		LLwExample lLwExample;
		try {
			MedicalDto medicalDto = new MedicalDto();
			
			if(StringUtil.isNotEmpty(idcard)) {
				medicalDto.setIdcard(idcard);
				
			}
			
			if(StringUtil.isNotEmpty(sicard)) {
				medicalDto.setSicard(sicard);
			}
			
			if(StringUtil.isNotEmpty(name)) {
				medicalDto.setName(name);
			} 
			
			medicalDto.setStatus(1);
			lLwExample = new LLwExample(medicalDto);
			lLwExample.orderBy("inDate").desc();
			PersonDto personDto = new PersonDto();
	        LLwExample joinExample = new LLwExample(personDto);
	    	LeftJoin leftJoin = new LeftJoin(new String[]{"idcardPhoto as photoAddress","sicard as sicard"}, "personId", "personId", joinExample);
	    	List<MedicalDto> medicalList = medicalService.selectByExampleLeftJoin(lLwExample, leftJoin, MedicalDto.class);
	    	
	    	if (medicalList!=null && medicalList.size()>0){
	    		MedicalDto medical = medicalList.get(0);
	    		BeanUtils.copyProperties(medical, pi);
	    	}else{
	    		BeanUtils.copyProperties(personInfo, pi);
	    	}
	    	
		} catch (Exception e) {
			logger.error("调数据同步接口出错：",e);
		}

		
 		//查询是否有模板
		PersonModelDto pm = new PersonModelDto();
		pm.setPersonId(personInfo.getPersonId());
		pm.setStatus(10);
		List<PersonModelDto> personModelList = personModelService.selectList(pm);
		if(CollectionUtils.isEmpty(personModelList)) {
			pi.setHasModel(false);
		}else {
			pi.setHasModel(true);
		}
		if(StringUtil.isNotEmpty(personInfo.getSicard())&&StringUtil.isEmpty(pi.getSicard())){
			pi.setSicard(personInfo.getSicard());
		}
        return ResponseParam.ok().setData(pi);
         
	}
	
 
	
	@PostMapping("/hospitalRegistration")
	@ApiOperation(value = "入院登记", notes = "入院登记",tags = "人员信息相关接口列表")
	@ApiImplicitParams(@ApiImplicitParam(name = "auth",value = "access token，可以通过token接口获取，也可以用户名和密码加mac地址生成",required = true,dataType = "String",paramType = "header"))
	@ApiResponses({
	@ApiResponse(code = 1001,message = "参数不正确"),
	@ApiResponse(code = 1002,message = "登记失败"),
	@ApiResponse(code = 1003,message = "身份证号码不正确")
	})
	public @ApiParam ResponseParam<RecogResultResponse> hospitalRegistration(@RequestBody @ApiParam HospitalRegistrationInfo request) {
		String idcard = request.getIdcard();
		String name = request.getName();
		String medicalNo = request.getMedicalNo();
		try {
		if(StringUtil.isEmpty(idcard) || StringUtil.isEmpty(name)|| StringUtil.isEmpty(medicalNo)) {
			return ResponseParam.error("1001", "参数不正确");
		}
		
		PersonDto personInfo = null;
		if(StringUtil.isNotEmpty(idcard) && StringUtil.isNotEmpty(name)){
			PersonDto where = new PersonDto();
			where.setIdcard(request.getIdcard());
			//where.setName(request.getName());
			personInfo = personService.selectOne(where);
		}
		
		String idcardPhoto = null;
		if (StringUtil.isNotEmpty(request.getIdcardPhoto())) {
			idcardPhoto = FtpUtil.getInstance(BaseConstants.MODULE_NAME).upload(new ByteArrayInputStream(Base64.decode(request.getIdcardPhoto())), "idcard", "jpg");
			if (StringUtil.isEmpty(idcardPhoto)) {
				return ResponseParam.error("服务器异常");
			}
		}
		
		MedicalDto m = new MedicalDto();
		m.setStatus(1);
		m.setMedicalNo(medicalNo);
		List<MedicalDto> medicalDtoList = medicalService.selectListInOrg(m);
		if(!CollectionUtils.isEmpty(medicalDtoList)) {
			return ResponseParam.error("1001", "住院号已存在,请修改");
		}
		//插入人员信息
		if(personInfo==null){
			
			String birthday = idcard.substring(6, 10) + "-" + idcard.substring(10, 12) + "-" + idcard.substring(12, 14);
			String sex = Integer.parseInt(idcard.substring(16, 17)) % 2 == 0 ? "2": "1";
			PersonDto personDto = new PersonDto();
			personDto.setName(name);
			personDto.setIdcard(idcard);
			personDto.setSex(sex);
			personDto.setPersonType(request.getPersonType());
			personDto.setBirthday(DateUtils.string2Date(birthday));
			personDto.setIdcardPhoto(idcardPhoto);
			personDto.setHeadPhoto(idcardPhoto);
			Long personId = personService.insertPerson(personDto);
			if (personId < 1) {
				return ResponseParam.error("1002","登记失败");
			}
			personInfo = personService.selectByPrimaryKey(personId);
		}else {
			//要进行更新 而且只会更新到名字
			PersonDto personDto = new PersonDto();
			personDto.setPersonId(personInfo.getPersonId());
			personDto.setName(name);
			personDto.setIdcard(idcard);
			personService.updateByPrimaryKeySelective(personDto);
		}
		
			MedicalDto medicalDto = new MedicalDto();
			medicalDto.setIdcard(idcard);
			medicalDto.setStatus(1);
			medicalDto.setMedicalType(1);
			
			List<MedicalDto> l = medicalService.selectListInOrg(medicalDto);
			
			//判断是否已在就诊记录中
			boolean hasMedical = false;
			if(l.size() > 0) {
				hasMedical = true;
				medicalDto.setMedicalId(l.get(0).getMedicalId());
				medicalDto.setDataFrom(l.get(0).getDataFrom());
				medicalDto.setPersonType(l.get(0).getPersonType());
				medicalDto.setCreateTime(l.get(0).getCreateTime());
			}else {
				medicalDto.setDataFrom(1);
				medicalDto.setCreateTime(new Date());
			}
			medicalDto.setPersonType(request.getPersonType());
			medicalDto.setName(name);
			medicalDto.setPersonId(personInfo.getPersonId());
			medicalDto.setSex(personInfo.getSex());
			medicalDto.setAge(IdcardUtils.getAgeByIdCard(idcard));
			medicalDto.setMedicalType(1);
			medicalDto.setMedicalNo(request.getMedicalNo());
			medicalDto.setBedNo(request.getBedNo());
			medicalDto.setDiagnosis(request.getDiagnosis());
			
			//业务系统以及统筹由界面选择
			medicalDto.setBusiType(request.getBusiType());
			medicalDto.setPersonFrom(request.getPersonFrom());
			medicalDto.setUpdateTime(new Date());
			
			if(request.getInDate() != null) {
				medicalDto.setInDate(new Date(request.getInDate()));
				medicalDto.setInDate0(new Date(request.getInDate()));
			}else {
				medicalDto.setInDate(new Date());
				medicalDto.setInDate0(new Date());
			}
			
			LoginUser loginUser =  JWTFilter.getCurrentUser();	
			
			//获取医院信息
			Long orgId = getOrgId(loginUser.getOrgId());
			if(orgId == null) {
				return ResponseParam.error("1004","登录账号未绑定机构类型");
			}
		
			medicalDto.setHospitalName("南阳医院");//默认医院机构是南阳医院，
			//科室非必填
			if(request.getDepartId() != null) {
				medicalDto.setOrgId(request.getDepartId());
				SysOrganizationDto so = organizationService.selectByPrimaryKey(request.getDepartId());
				if(so != null) {
					medicalDto.setDepartId(so.getOrgId());
					medicalDto.setDepartName(so.getName());
				}else{
					return ResponseParam.error("1002","根据科室ID没有找到对应的科室机构!");
				}
			}else{
				//如果不填写科室机构时，默认设备登录时，授权的用户所在机构为住院人员所在机构
				medicalDto.setOrgId(orgId);
				SysOrganizationDto so = organizationService.selectByPrimaryKey(orgId);
				if(so != null){
					medicalDto.setDepartName(so.getName());
				}else{
					return ResponseParam.error("1002","根据登录用户ID没有找到对应的科室机构!");
				}
			}
			
			int rows = 1;
			if(hasMedical) {
				rows = medicalService.updateByPrimaryKeySelective(medicalDto);
			}else {
				rows = medicalService.registration(medicalDto)?1:0;
			}
			
	        if (rows > 0) {
	        	return ResponseParam.ok("登记成功");
	        } else {
	        	return ResponseParam.error("1002","登记失败");
	        }
		} catch (Exception e) {
			// TODO Auto-generated catch block
			logger.error("", e);
			return ResponseParam.error("1002","登记失败");
		}
	}

	
	
	
	@GetMapping("/hospitalDischargeRegistration")
	@ApiOperation(value="出院登记", notes = "出院登记", tags = "人员信息相关接口列表")
	@ApiImplicitParams({@ApiImplicitParam(name = "auth",value = "access token，可以通过token接口获取，也可以用户名和密码加mac地址生成",required = true,dataType = "String",paramType = "header")
						})
	@ApiResponses({
		@ApiResponse(code = 1001,message = "出院处理失败")
	    })
	public  ResponseParam hospitalDischargeRegistration(
			@ApiParam(name="medicalId",value = "住院ID",required = true) @RequestParam(value = "medicalId",required = true) Long medicalId,
			@ApiParam(name="outDate",value = "出院时间",required = true) @RequestParam(value = "outDate",required = true) Long outDate
			)
	{
		if(medicalId != null) {
			MedicalDto md = new MedicalDto();
			md.setMedicalId(medicalId);
			md.setStatus(2);
			if(outDate != null) {
				md.setOutDate(new Date(outDate));
				md.setOutDate0(new Date(outDate));
			}else {
				md.setOutDate(new Date());
				md.setOutDate0(new Date());
			}
			md.setUpdateTime(new Date());
			int result = medicalService.updateByPrimaryKeySelective(md);
		    if(result > 0 ) {
		    	return ResponseParam.ok("出院处理成功");
		    }else {
		    	return ResponseParam.error("1001","出院处理失败");
		    }
		}else {
			return ResponseParam.error("1001","出院处理失败");
		}
	}
	
	
	@GetMapping("/getMedicalInfoByIdcard")
	@ApiOperation(value="根据身份证获取病人信息", notes = "根据身份证获取病人信息", tags = "人员信息相关接口列表")
	@ApiImplicitParams({@ApiImplicitParam(name = "auth",value = "access token，可以通过token接口获取，也可以用户名和密码加mac地址生成",required = true,dataType = "String",paramType = "header")
						})
	@ApiResponses({
		@ApiResponse(code = 1001,message = "无数据"),
		@ApiResponse(code = 1002,message = "参数不正确")
	    })
	public  ResponseParam<PersonInfo> getMedicalInfoByIdcard(
			@ApiParam(name="idCard",value = "身份证",required = true) @RequestParam(value = "idCard", required = true) String idCard
			)
	{
		if(StringUtil.isEmpty(idCard)) {
			return ResponseParam.error("1002", "参数不正确");
		}
		

		MedicalDto md = new MedicalDto();
		//根据身份证查询在院得住院病人
		md.setIdcard(idCard);
		md.setStatus(1);
		md.setMedicalType(1);
		
		List<MedicalDto> l = medicalService.selectListInOrg(md);
		PersonInfo personInfo = null;
		if(l.size() > 0) {
			personInfo = new PersonInfo();
			md = l.get(0);
			personInfo.setName(md.getName());
			personInfo.setBedNo(md.getBedNo());
			personInfo.setMedicalNo(md.getMedicalNo());
			personInfo.setDiagnosis(md.getDiagnosis());
			personInfo.setDataFrom(md.getDataFrom());
			personInfo.setInDate(md.getInDate());
			personInfo.setDepartId(md.getDepartId());
			personInfo.setDepartName(md.getDepartName());
			personInfo.setBusiType(md.getBusiType());
			personInfo.setPersonFrom(md.getPersonFrom());
			personInfo.setPersonType(md.getPersonType());
		}else {
			return ResponseParam.error("1001", "无数据");
		}
		return ResponseParam.ok().setData(personInfo);
	}
	
	@PostMapping(value = "/specialPersonCreateModel")
	@ApiOperation(value = "特殊人员建模", notes = "特殊人员建模", tags = "人员信息相关接口列表")
	@ApiImplicitParams({ @ApiImplicitParam(name = "auth", value = "access token，登录接口返回的", required = true, dataType = "String", paramType = "header") })
	@ApiResponses({@ApiResponse(code = 200, message = "success"),@ApiResponse(code = 400, message = "系统异常") })
	/*public @ApiParam ResponseParam specialPersonCreateModel( @ApiParam SpecialPersonCreateModelRequest request) {*/
	public @ApiParam ResponseParam specialPersonCreateModel(@ApiParam(name="files",value = "人脸照片",required = false) @RequestParam(value = "files", required = false) MultipartFile[] files,
			@ApiParam(name="idcard",value = "身份证",required = true) @RequestParam(value = "idcard", required = true) String idcard,
			@ApiParam(name="name",value = "姓名",required = true) @RequestParam(value = "name", required = true) String name,
	        @ApiParam(name="modelPhoto",value = "模板照",required = true) @RequestParam(value = "modelPhoto", required = true) String modelPhoto,
	        @ApiParam(name="operatorPhoto",value = "操作人照片,图片 base64编码") @RequestParam(value = "operatorPhoto") String operatorPhoto,
	        @ApiParam(name="sicard",value = "社保卡号",required = false,defaultValue="") @RequestParam(value = "sicard", required = false) String sicard) {
       
		try {
			 CreateModelAndRecognizeRequest request = new CreateModelAndRecognizeRequest();
			 request.setRecogBusi(11);
			 name = new String(name.getBytes("iso8859-1"),"UTF-8");

			if(StringUtil.isEmpty(idcard)){
				return ResponseParam.error("1000","身份证号码不能为空");
			}
			if(StringUtil.isEmpty(name)){
				return ResponseParam.error("1000","姓名不能为空");
			}
			if(StringUtil.isEmpty(modelPhoto)){
				return ResponseParam.error("1000","模板照不能为空");
			}
			
			if (!IdcardUtils.validateIdCard18(idcard)) {
				return ResponseParam.error("1000","身份证号码不正确");
			}
			if (name.length() > 50) {
				return ResponseParam.error("1000","姓名长度不正确");
			}	
			
			if(StringUtil.isEmpty(operatorPhoto)){
				return ResponseParam.error("操作人照片不能为空");
			}
			
			List<String> materialList = new ArrayList<String>();
			
			/*
			File testFile = new File("D://pic//download.jpg");
			File[] testArray = new File[1];
			if(testFile.exists()){
				String oFile = FtpUtil.getInstance(BaseConstants.MODULE_NAME).upload(testFile, "personMaterial");
				if(StringUtils.isNotEmpty(oFile)){
					materialList.add(oFile);
					modelPhoto = oFile;
					operatorPhoto = oFile;
				}
			}*/
			
			
			
			if(files!=null && files.length>0){
				for (MultipartFile file:  files){
					if (file != null) {
							//String oFile = FtpUtil.getInstance(BaseConstants.MODULE_NAME).upload(file,"model");
							String oFile = FtpUtil.getInstance(BaseConstants.MODULE_NAME).upload(file, "personMaterial");
							if(StringUtils.isNotEmpty(oFile)){
								materialList.add(oFile);
							}
					}
				}
			}else {
				return ResponseParam.error("未上传证明材料");
			}
			
			
			
			
	//		modelPhoto = "";
			modelPhoto = FtpUtil.getInstance(BaseConstants.MODULE_NAME).upload(new ByteArrayInputStream(Base64.decode(modelPhoto)), "model", "jpg");
			if(StringUtils.isEmpty(modelPhoto)) {
				return ResponseParam.error("FTP上传文件出错");
			}
			PersonDto where = new PersonDto();
			where.setIdcard(idcard);
			where.setName(name);
			PersonDto personInfo = personService.selectOne(where);
		 
			//先新增人员基本信息
			if(personInfo==null){
				name = name.trim();
				idcard = idcard.trim();
				String birthday = idcard.substring(6, 10) + "-" + idcard.substring(10, 12) + "-" + idcard.substring(12, 14);
				String sex = Integer.parseInt(idcard.substring(16, 17)) % 2 == 0 ? "2": "1";
		
				PersonDto personDto = new PersonDto();
				personDto.setName(name);
				personDto.setIdcard(idcard);
				personDto.setSex(sex);
				personDto.setSicard(sicard);
				personDto.setIdcardPhoto(modelPhoto);
				personDto.setHeadPhoto(modelPhoto);
				personDto.setBirthday(DateUtils.string2Date(birthday));
				Long personId = personService.insertPerson(personDto);
				if (personId < 1) {
					return ResponseParam.error("1000","新增人员失败");
				}
				personInfo = personService.selectByPrimaryKey(personId);
			}
			Long modelId = -1L;
			// 添加人员模板信息
			if (StringUtil.isNotEmpty(modelPhoto)){
	
				PersonModelDto model = new PersonModelDto();
				model.setPersonId(personInfo.getPersonId());
				model.setBioType(11);
				model.setModelAddress(modelPhoto);
				model.setIdcardAddress(modelPhoto);
				model.setCreateType(11);
				model.setCreateTime(new Date());
				model.setStatus(10);
				modelId = personService.addModelByPerson(model);
			}
			
			request.setPersonId(personInfo.getPersonId());
	       if(modelId > 0) {
	    	  // operatorPhoto = "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";
	    	   operatorPhoto = FtpUtil.getInstance(BaseConstants.MODULE_NAME).upload(new ByteArrayInputStream(Base64.decode(operatorPhoto)), "operatorPhoto", "jpg");
	    	   if(StringUtils.isEmpty(operatorPhoto)) {
					return ResponseParam.error("上传文件出错");
				}
	    	   
	    	   for(String s : materialList) {
		   			PersonDataDto pdd = new PersonDataDto();
		   			pdd.setPersonId(personInfo.getPersonId());
		   			pdd.setDataUrl(s);//设置：材料URL
		   			pdd.setCreateDate(new Date());
		   			pdd.setRecogPic(operatorPhoto);//设置：操作员留底照URL
		   			pdd.setModelId(modelId);
		   			personDataService.insertSelective(pdd);
	   			}
	       }else {
	    	   //upRecogStatusBypersonId(2, request);这儿不需要只有成功了才更改状态
	    	   return ResponseParam.ok("建模失败");
	       }
	       
	       addRecogByRequest(request);
	       upRecogStatusBypersonId(1, request);
        }catch (Exception e) {
        	logger.error("特殊人员建模接口出错：",e);
			return ResponseParam.error("服务异常");
		}
		return ResponseParam.ok("建模成功");
		
	}
	
	public Long getOrgId(Long orgId) {
			SysOrganizationDto so = organizationService.selectByPrimaryKey(orgId);
			if(so != null && so.getOrgCategory() != null) {
				if(so.getOrgCategory() == 1) {//医院
					Long id = so.getPid();
					return getOrgId(id);
				}else if(so.getOrgCategory() == 2) {//科室
					return so.getOrgId();
				}else {
					return null;
				}
			}else {
				return null;
			}
	}
	
	public SysOrganizationDto getYBJOrg(Long orgId) {
		SysOrganizationDto so = organizationService.selectByPrimaryKey(orgId);
		if(so.getOrgCategory() == 2) {
			return so;
		}else {
			return getYBJOrg(so.getPid());
		}
	}
	
	
	public void upRecogStatusBypersonId(Integer recogStatus, CreateModelAndRecognizeRequest request){
		MedicalDto medicalDto = new MedicalDto();
		System.out.println("------------upRecogStatusBypersonId");
		try {
			MedicalDto w = new MedicalDto();
			w.setPersonId(request.getPersonId());
			//认证业务（详见字典表，10:抽查认证、11:普查认证、12:首次查床、13:出院认证、14:实人就诊、15:实人购药、16:门特线上、17:门特线下、18:大额检查、19:诊疗项目、20:医保稽核）
			if(request.getRecogBusi()==10 || request.getRecogBusi()==11 || request.getRecogBusi()==12 || request.getRecogBusi()==20){
				w.setMedicalType(1);
				w.setStatus(1);
			}else if(request.getRecogBusi()==14){
				w.setMedicalType(2);
			}else if(request.getRecogBusi()==15){
				w.setMedicalType(4);
			}
			LLwExample example = new LLwExample(w);
			if(request.getRecogBusi()==18 || request.getRecogBusi()==19){
				example.andNotEqualTo("medicalType", 4);
			}
			example.orderBy("medicalId").desc();
		    List<MedicalDto> List = medicalService.selectByExample(example);
		    if(List!=null && List.size()>0){
		    	medicalDto.setMedicalId(List.get(0).getMedicalId());
		    }
		    medicalDto.setRecogStatus(recogStatus);
		    int i = medicalService.updateByPrimaryKeySelective(medicalDto);
		    System.out.println("------------upRecogStatusBypersonId ----i"+i);
		    
		}catch (Exception e) {
			logger.error("t_medical update recogStatus error：",e.getMessage());
		}
		
		    
	}
	
	
	public void addRecogByRequest(CreateModelAndRecognizeRequest request){
		
		try {
			MedicalDto w = new MedicalDto();
			w.setPersonId(request.getPersonId());
			//认证业务（详见字典表，10:抽查认证、11:普查认证、12:首次查床、13:出院认证、14:实人就诊、15:实人购药、16:门特线上、17:门特线下、18:大额检查、19:诊疗项目、20:医保稽核）
			if(request.getRecogBusi()==10 || request.getRecogBusi()==11 || request.getRecogBusi()==12 || request.getRecogBusi()==20){
				w.setMedicalType(1);
				w.setStatus(1);
			}else if(request.getRecogBusi()==14){
				w.setMedicalType(2);
			}else if(request.getRecogBusi()==15){
				w.setMedicalType(4);
			}
			LLwExample example = new LLwExample(w);
			if(request.getRecogBusi()==18 || request.getRecogBusi()==19){
				example.andNotEqualTo("medicalType", 4);
			}
			example.orderBy("medicalId").desc();
		    List<MedicalDto> List = medicalService.selectByExample(example);
		    if(List!=null && List.size()>0){
		    	RecogDto recogDto = new RecogDto();
				recogDto.setPersonId(request.getPersonId());
				recogDto.setBioType(request.getBioType());
				recogDto.setRecogTime(new Date());
				recogDto.setRecogBusi(Long.valueOf(request.getRecogBusi().longValue()));
				recogDto.setDeviceCode(request.getDevCode());
				recogDto.setDeviceType(request.getDevType());
				recogDto.setCreateStaff(JWTFilter.getCurrentUser().getName());
				recogDto.setOrgId(request.getOrgId());
				recogDto.setMedicalId(List.get(0).getMedicalId());
				recogDto.setRecogResult(11l);//10未认证、 11认证已通过、12认证未通过
				//10、人脸核查；11、特殊登记；12、特殊建模
				recogDto.setRecogMode(12L);
				recogService.insertSelective(recogDto);
		    }
		    
		}catch (Exception e) {
			logger.error(" add Recog ByRequest error：",e.getMessage());
		}
		
		
		
		
	}
	public static void main(String[] args){
		File testFile = new File("D://pic//430121198902271031.jpg");
		if(testFile.exists()){
			System.out.println("file");
		}
	}
	

}
